// Generated by uRequire v0.7.0-beta.33 target: 'specDev' template: 'nodejs'

const _ = require('lodash');
const chai = require('chai');
const _B = require('uberscore');
const expect = chai['expect'];
const l = new _B.Logger('specHelpers.js');

export const equal = function(a, b) {
  return expect(a).to.equal(b);
};
export const notEqual = function(a, b) {
  return expect(a).to.not.equal(b);
};
export const ok = function(a) {
  return expect(a).to.be.ok;
};
export const notOk = function(a) {
  return expect(a).to.be.not.ok;
};
export const tru = function(a) {
  return expect(a).to.be['true'];
};
export const fals = function(a) {
  return expect(a).to.be['false'];
};
export const are = function(name, asEqual = true) {
  return function(a, b) {
    const path = [];
    const isEq = _B[name](a, b, {
      path: path,
      allProps: true,
      exclude: ['inspect'],
    });
    if (asEqual) {
      if (!isEq) {
        l.warn(
          'Discrepancy, expected `true` from _B.' + name + ' \n at path: ',
          path.join('.'),
          ' \n left value = ',
          _B.getp(a, path),
          '\n right value =',
          _B.getp(b, path),
          ' \n left Object = \n',
          a,
          '\n right Object = \n',
          b,
        );
      }
      return expect(isEq).to.be['true'];
    } else {
      if (isEq) {
        l.warn('Discrepancy, expected `false` from _B.' + name + ', but its `true`.');
      }
      return expect(isEq).to.be['false'];
    }
  };
};
export const createEqualSet = function(asEqual) {
  return function(result, expected) {
    const isEq = _B.isEqualArraySet(result, expected);
    if (asEqual) {
      if (!isEq) {
        l.warn(
          '\n _B.isEqualArraySet expected `true`',
          '\n result \\ expected \n',
          _.difference(result, expected),
          '\n expected \\ result \n',
          _.difference(expected, result),
        );
      }
      return expect(isEq).to.be['true'];
    } else {
      if (isEq) {
        l.warn('\n _B.isEqualArraySet expected `false`, got `true`');
      }
      return expect(isEq).to.be['false'];
    }
  };
};
export const equalSet = createEqualSet(true);
export const notEqualSet = createEqualSet(false);
export const deepEqual = are('isEqual');
export const notDeepEqual = are('isEqual', false);
export const exact = are('isExact');
export const notExact = are('isExact', false);
export const iqual = are('isIqual');
export const notIqual = are('isIqual', false);
export const ixact = are('isIxact');
export const notIxact = are('isIxact', false);
export const like = are('isLike');
export const notLike = are('isLike', false);
export const likeBA = function(a, b) {
  return like(b, a);
};
export const notLikeBA = function(a, b) {
  return notLike(b, a);
};
